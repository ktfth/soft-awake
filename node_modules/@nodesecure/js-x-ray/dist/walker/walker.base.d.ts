import type { ESTree } from "meriyah";
export interface WalkerContext {
    skip: () => void;
    remove: () => void;
    replace: (node: ESTree.Node | void) => void;
    replaceAndSkip: (node: ESTree.Node | void) => void;
}
export declare class WalkerBase {
    should_skip: boolean;
    should_remove: boolean;
    replacement: ESTree.Node | null;
    context: WalkerContext;
    constructor();
    replace(parent: ESTree.Node | null | undefined, prop: string | number | symbol | null | undefined, index: number | null | undefined, node: ESTree.Node): void;
    remove(parent: ESTree.Node | null | undefined, prop: string | number | symbol | null | undefined, index: number | null | undefined): void;
}
//# sourceMappingURL=walker.base.d.ts.map