// Import Internal Dependencies
import { toArrayLocation, rootLocation } from "./utils/toArrayLocation.js";
import { notNullOrUndefined } from "./utils/notNullOrUndefined.js";
export const warnings = Object.freeze({
    "parsing-error": {
        i18n: "sast_warnings.parsing_error",
        severity: "Information"
    },
    "unsafe-import": {
        i18n: "sast_warnings.unsafe_import",
        severity: "Warning"
    },
    "unsafe-regex": {
        i18n: "sast_warnings.unsafe_regex",
        severity: "Warning"
    },
    "unsafe-stmt": {
        code: "unsafe-stmt",
        i18n: "sast_warnings.unsafe_stmt",
        severity: "Warning"
    },
    "encoded-literal": {
        i18n: "sast_warnings.encoded_literal",
        severity: "Information"
    },
    "short-identifiers": {
        i18n: "sast_warnings.short_identifiers",
        severity: "Warning"
    },
    "suspicious-literal": {
        i18n: "sast_warnings.suspicious_literal",
        severity: "Warning"
    },
    "suspicious-file": {
        i18n: "sast_warnings.suspicious_file",
        severity: "Critical",
        experimental: false
    },
    "obfuscated-code": {
        i18n: "sast_warnings.obfuscated_code",
        severity: "Critical",
        experimental: true
    },
    "weak-crypto": {
        i18n: "sast_warnings.weak_crypto",
        severity: "Information",
        experimental: false
    },
    "shady-link": {
        i18n: "sast_warnings.shady_link",
        severity: "Warning",
        experimental: false
    },
    "unsafe-command": {
        i18n: "sast_warnings.unsafe_command",
        severity: "Warning",
        experimental: true
    },
    "synchronous-io": {
        i18n: "sast_warnings.synchronous_io",
        severity: "Warning",
        experimental: true
    },
    "serialize-environment": {
        i18n: "sast_warnings.serialize_environment",
        severity: "Warning",
        experimental: false
    },
    "data-exfiltration": {
        i18n: "sast_warnings.data_exfiltration",
        severity: "Warning",
        experimental: false
    }
});
export function generateWarning(kind, options) {
    const { file = null, value, source = "JS-X-Ray" } = options;
    const location = options.location ?? rootLocation();
    if (kind === "encoded-literal") {
        return {
            kind,
            value,
            location: [toArrayLocation(location)],
            source,
            ...warnings[kind]
        };
    }
    return {
        kind,
        location: toArrayLocation(location),
        source,
        ...warnings[kind],
        ...(notNullOrUndefined(file) ? { file } : {}),
        ...(notNullOrUndefined(value) ? { value } : { value: null })
    };
}
//# sourceMappingURL=warnings.js.map