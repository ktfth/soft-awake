import { EventEmitter } from "node:events";
import type { ESTree } from "meriyah";
export interface DataIdentifierOptions {
    /**
     * @default false
     */
    removeGlobalIdentifier?: boolean;
}
export interface SourceTraced {
    followConsecutiveAssignment?: boolean;
    followReturnValueAssignement?: boolean;
    moduleName?: string | null;
    name?: string;
}
export interface AssignmentMemory {
    type: "AliasBinding" | "ReturnValueAssignment";
    name: string;
}
export interface Traced extends Required<SourceTraced> {
    identifierOrMemberExpr: string;
    assignmentMemory: AssignmentMemory[];
}
export interface TracedIdentifierReport {
    name: string;
    identifierOrMemberExpr: string;
    assignmentMemory: AssignmentMemory[];
}
export declare class VariableTracer extends EventEmitter {
    #private;
    static AssignmentEvent: symbol;
    literalIdentifiers: Map<string, string>;
    importedModules: Set<string>;
    debug(): void;
    enableDefaultTracing(): this;
    /**
     * @example
     * new VariableTracer()
     *  .trace("require", { followConsecutiveAssignment: true })
     *  .trace("process.mainModule")
     */
    trace(identifierOrMemberExpr: string, options?: SourceTraced): this;
    getDataFromIdentifier(identifierOrMemberExpr: string, options?: DataIdentifierOptions): null | TracedIdentifierReport;
    walk(node: ESTree.Node): void;
}
//# sourceMappingURL=VariableTracer.d.ts.map